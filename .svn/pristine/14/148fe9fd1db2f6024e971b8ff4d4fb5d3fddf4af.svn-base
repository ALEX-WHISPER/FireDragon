var Flags = require("GameFlags");
var catchingMsgItemPool = require("CatchingMsgItemPool");

cc.Class({
    extends: cc.Component,

    properties: {
        scrollView: {
        	default: null,
        	type: cc.ScrollView
        },

        scrollItemTotalCount: 0,
        scrollItemMaxCount: 30,

        catchingMinusInfo: {
            default: null,
            type: cc.Node
        },

        msgItemPoolController: {
            default: null,
            type: catchingMsgItemPool
        },

        itemTemplate: { // item template to instantiate other items
            default: null,
            type: cc.Prefab
        },

        lable_CurTreasureCount: {
            default: null,
            type: cc.Label
        },

        lable_MagnificationCount: {
            default: null,
            type: cc.Label
        },

        label_CaughtCount: {
            default: null,
            type: cc.Label
        },

        playButton: {
            default: null,
            type: cc.Button
        },
        
        startPlayLabelStr: '',
        continueLabelStr: '',
        pauseLabelStr: '',
    },

    onLoad: function() {
        this.content = this.scrollView.content;
        this.caughtCount = 0;
        this.items = []; // array to store spawned items
        this.labelChanged_PlayButton(-1);        
    },

    start: function() {
        if (!this.catchingMinusInfo.active) {
            this.catchingMinusInfo.active = true;
            this.catchingMinusInfo.opacity = 0;
        }
    },
    
//#region update data
    //  update current treasure count
    setNewTreasure: function(newTreasure) {
        this.lable_CurTreasureCount.string = newTreasure;
    },

    //  update current magnification count
    setNewMag: function(newMag) {
        if(newMag != this.lable_MagnificationCount.string) {this.lable_MagnificationCount.string = newMag;}
    },

    //  update current caught count
    setNewCaughtCount: function(newCaughtCount) {
        if (newCaughtCount != this.label_CaughtCount.string) { this.label_CaughtCount.string = newCaughtCount;}
    },

    //  pop out catching-minus floating box
    setCatchingMinusInfo: function(curMagValue) {
        this.catchingMinusInfo.opacity = 255;
        this.catchingMinusInfo.runAction(cc.fadeOut(1));
        this.catchingMinusInfo.getChildByName("minusCount").getComponent(cc.Label).string = "-" + curMagValue.toString();
    },
    
    //  add catching result item to scrollView
    onScrollViewVicItemAdded: function(msg) {
        this.label_CaughtCount.string = ++this.caughtCount;

        if (this.scrollItemTotalCount >= this.msgItemPoolController.maxCount) {
            var first = this.items.shift();
            this.scrollItemTotalCount--;
            this.content.removeChild(first);
            
            this.msgItemPoolController.itemPool.put(first); //  put the item been removed to object pool for reusing
        }

        let item = null;
        if (this.msgItemPoolController.itemPool.size() > 0) {
            item = this.msgItemPoolController.itemPool.get();
            console.log("get available item from itemPool");
        } else {
            console.log("no available item in itemPool!!!");
            return;
        }
        this.content.addChild(item);
        this.items.push(item);

        this.content.height = (this.scrollItemTotalCount + 2) * item.height;
        this.scrollItemTotalCount++;

        if (this.scrollItemTotalCount > 10) {
            this.scrollView.scrollToBottom(0.3);
        }

        //  set info
        item.getChildByName("enemyImg").getComponent(cc.Sprite).spriteFrame = msg.enemyImg;
        item.getChildByName("attackObj").getComponent(cc.Label).string = msg.attackObj;
        item.getChildByName("result").getComponent(cc.Label).string = msg.result;
        
        console.log("attackObj: " + msg.attackObj + ", result: " + msg.result + ", itemCount: " + this.items.length);
    },
//#endregion

//#region update visually
    //  update the button sprite frames: play -> pause
    onHitPlayButton: function() {
        // this.spriteChanged_PlayButton(this.playButtonSprites);        
        this.labelChanged_PlayButton(0);
    },

    //  update the button sprite frames: pause -> play 
    onHitPauseButton: function() {
        // this.spriteChanged_PlayButton(this.playButtonSprites);
        this.labelChanged_PlayButton(1);        
    },

    spriteChanged_PlayButton: function(spritesArray) {
        this.playButton.normalSprite = spritesArray[0];
        this.playButton.pressedSprite = spritesArray[1];
        this.playButton.hoverSprite = spritesArray[2];
        this.playButton.disabledSprite = spritesArray[3];
    },

    labelChanged_PlayButton: function(tarStats) {
        //  on start
        if (tarStats === -1) {
            this.playButton.node.getChildByName('Label').getComponent(cc.Label).string = this.startPlayLabelStr;            
        }

        //  on pause
        if (tarStats === 0) {
            this.playButton.node.getChildByName('Label').getComponent(cc.Label).string = this.pauseLabelStr;
        }

        //  on continue
        if (tarStats === 1) {
            this.playButton.node.getChildByName('Label').getComponent(cc.Label).string = this.continueLabelStr;            
        }
    },
//#endregion

    onScrollViewReset: function() {
        for (let i = 0; i < this.scrollItemTotalCount; i++) {
            var first = this.items.shift();
            this.content.removeChild(first);
        }
        this.scrollItemTotalCount = 0;        
    },

    //  when treasure is running out
    onRunningOutofTreasure: function() {
        this.spriteChanged_PlayButton(this.playButtonSprites);
        this.playButton.interactable = false;
    },

    onResumeEnoughTreasure: function() {
        this.playButton.interactable = true;
    }
});
