{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","getPlayerDistance","pDistance","node","position","player","getPosition","onPickedup","starSpawner","gainScore","destroy","update","opacityRatio","elapsedTime","starLifeTime","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AACAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,oBAAY,CADJ;;AAGRC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAHE,KAHP;;AAYL;AACAC,uBAAmB,6BAAW;AAC1B,eAAOT,GAAGU,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiC,KAAKN,IAAL,CAAUO,MAAV,CAAiBC,WAAjB,EAAjC,CAAP;AACH,KAfI;;AAiBL;AACAC,gBAAY,sBAAW;AACnB,aAAKT,IAAL,CAAUU,WAAV,GADmB,CACS;AAC5B,aAAKV,IAAL,CAAUW,SAAV;AACA,aAAKN,IAAL,CAAUO,OAAV;AACH,KAtBI;;AAwBL;AACAC,YAAQ,kBAAW;AACf,YAAI,KAAKV,iBAAL,KAA2B,KAAKJ,UAApC,EAAgD;AAC5C,iBAAKU,UAAL,GAD4C,CACxB;AACpB;AACH;;AAED,YAAIK,eAAe,IAAI,KAAKd,IAAL,CAAUe,WAAV,GAAwB,KAAKf,IAAL,CAAUgB,YAAzD;AACA,YAAIC,aAAa,EAAjB;AACA,aAAKZ,IAAL,CAAUa,OAAV,GAAoBD,aAAaE,KAAKC,KAAL,CAAWN,gBAAgB,MAAMG,UAAtB,CAAX,CAAjC;AACH;AAlCI,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        pickRadius: 0,\r\n\r\n        game: {\r\n            default: null,\r\n            serializable: false\r\n        }\r\n    },\r\n\r\n    //  get the distance between star and player\r\n    getPlayerDistance: function() {\r\n        return cc.pDistance(this.node.position, this.game.player.getPosition());\r\n    },\r\n\r\n    //  get called when the distance is close enough\r\n    onPickedup: function() {\r\n        this.game.starSpawner();    //  instantiate a new star\r\n        this.game.gainScore();\r\n        this.node.destroy();\r\n    },\r\n\r\n    //  detect the distance every frame\r\n    update: function() {\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            this.onPickedup();  //  pick this star\r\n            return;\r\n        }\r\n\r\n        var opacityRatio = 1 - this.game.elapsedTime / this.game.starLifeTime;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    }\r\n});\r\n"]}