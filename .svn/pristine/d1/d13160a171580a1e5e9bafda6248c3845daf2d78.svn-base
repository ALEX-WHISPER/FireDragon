(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/scripts/FireDragon/GamePlay/Game/GameModel.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '0b679Y7Wu9MQIwe/wkv+cj8', 'GameModel', __filename);
// scripts/FireDragon/GamePlay/Game/GameModel.js

"use strict";

var enemyBase = require("EnemyBase");
var flags = require("GameFlags");

cc.Class({
    extends: cc.Component,

    editor: {
        executionOrder: -2
    },

    properties: function properties() {
        return {
            catchActionInterval: 2,

            //#region Data
            curVoucherPoint: {
                get: function get() {
                    return this._curVoucherPoint;
                },
                visible: false
            },

            curTreasure: {
                get: function get() {
                    return this._curTreasure;
                },
                visible: false
            },

            curMag: {
                get: function get() {
                    return this._curMag;
                },
                visible: false
            },

            magInterval: {
                get: function get() {
                    return this._magInterval;
                },
                visible: false
            },

            treasurePerPoint: {
                get: function get() {
                    return this._treasurePerPoint;
                },
                visible: false
            },

            QP_ID: {
                get: function get() {
                    return this._QP_ID;
                },
                visible: false
            },

            bindingAccount: {
                get: function get() {
                    return this._bindingAccount;
                },
                visible: false
            },
            //#endregion

            enemies: {
                default: [],
                type: [enemyBase]
            },

            curEnemyIndex: {
                default: 0,
                visible: false
            },

            totalCardinal: {
                default: 0,
                visible: false
            }
        };
    },

    onLoad: function onLoad() {
        this.gameValuesInit();
    },

    start: function start() {
        this.selection_sort(); //  after sorting, the enemy array has been sorted ascendingly basic on cardinalNum

        for (var i = 0; i < this.enemies.length; i++) {
            console.log(this.enemies[i].enemyName + ": " + this.enemies[i].cardinalNum);
        }

        //  calc the total cardinal number, to confirm the spawning rate of each enemy
        for (var _i = 0; _i < this.enemies.length; _i++) {
            this.totalCardinal += this.enemies[_i].cardinalNum;
        }

        //  calc the spawning rate of each enemy
        for (var _i2 = 0; _i2 < this.enemies.length; _i2++) {
            this.enemies[_i2].spawningRate = this.enemies[_i2].cardinalNum / this.totalCardinal;
            if (_i2 > 0) this.enemies[_i2].spawningRate += this.enemies[_i2 - 1].spawningRate;
            console.log(this.enemies[_i2].enemyName + "'s spawningRange: " + this.enemies[_i2].spawningRate);
        }
    },

    startHangingUp: function startHangingUp() {
        this.schedule(this.onStartSpawning, this.catchActionInterval);
    },

    pauseHangingUp: function pauseHangingUp() {
        this.unschedule(this.onStartSpawning, this);
    },

    onStartSpawning: function onStartSpawning() {
        this.enemySpawner();
        this.enemyCatcher();
    },

    enemySpawner: function enemySpawner() {
        var calcSpawningRate = cc.random0To1();
        for (var i = 0; i < this.enemies.length; i++) {
            if (calcSpawningRate <= this.enemies[i].spawningRate) {
                this.curEnemyIndex = i;
                break;
            }
        }
        // this.curEnemyIndex = Math.floor(Math.random() * this.enemies.length);
        console.log("CalcSpawningNum: " + calcSpawningRate + ", spawned enemy: " + this.enemies[this.curEnemyIndex].enemyName);
    },

    enemyCatcher: function enemyCatcher() {
        //  randomize a num as the catching rate
        var calcCatchingRate = Math.random();
        var enemyCatchingRate = this.enemies[this.curEnemyIndex].catchingRate;
        console.log("CalcCatchingRate: " + calcCatchingRate + ", RealCatchingRate: " + enemyCatchingRate);

        if (calcCatchingRate <= enemyCatchingRate) {
            //  enemy get caught
            NOTIFICATION.emit(flags.ENEMY_GET_CAUGHT, { msg: this.enemies[this.curEnemyIndex].enemyName });
        } else {
            //  enemy get escaped
            NOTIFICATION.emit(flags.ENEMY_GET_ESCAPED, { msg: this.enemies[this.curEnemyIndex].enemyName });
        }

        NOTIFICATION.emit(flags.ENEMY_CATCH_ATTEMPT, { msg: this.enemies[this.curEnemyIndex].enemyName });
    },

    setNewTreasure: function setNewTreasure(newTreasure) {
        if (this.curTreasure != newTreasure) {
            this._curTreasure = newTreasure;
            console.log("update treasure: " + newTreasure);
        }
    },

    setNewMag: function setNewMag(newMag) {
        if (this.curMag != newMag) this._curMag = newMag;
    },

    setNewMagInterval: function setNewMagInterval(newMagInterval) {
        if (this.magInterval != newMagInterval) this._magInterval = newMagInterval;
    },

    setNewVoucherPoint: function setNewVoucherPoint(newVoucherPoint) {
        if (this.curVoucherPoint != newVoucherPoint) {
            this._curVoucherPoint = newVoucherPoint;
            console.log("update voucher point: " + newVoucherPoint);
        }
    },

    selection_sort: function selection_sort() {
        for (var i = 0; i < this.enemies.length; i++) {
            var minCardinal = this.enemies[i].cardinalNum;
            var minIndex = i;

            for (var j = i; j < this.enemies.length; j++) {
                if (this.enemies[j].cardinalNum < minCardinal) {
                    minCardinal = this.enemies[j].cardinalNum;
                    minIndex = j;
                }
            }

            if (minIndex != i) {
                var temp = this.enemies[minIndex];
                this.enemies[minIndex] = this.enemies[i];
                this.enemies[i] = temp;
            }
        }
    },

    //  FOR DEVELOPER TESTING
    gameValuesInit: function gameValuesInit() {
        this._curVoucherPoint = 50;
        this._curTreasure = 99;
        this._curMag = 1;
        this._magInterval = 1;
        this._treasurePerPoint = 2000;
        this._QP_ID = '233333333';
        this._bindingAccount = '00544-44944';
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=GameModel.js.map
        