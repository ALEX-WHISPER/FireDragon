(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/scripts/FireDragon/EnterRoom/EnterRoom.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '5a2a9nFGh1BBrUu2tK8xRvE', 'EnterRoom', __filename);
// scripts/FireDragon/EnterRoom/EnterRoom.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: function properties() {
        return {
            _gameControl: {
                default: null,
                type: require("GameController"),
                visible: true
            },

            _gameModel: {
                default: null,
                type: require("GameModel"),
                visible: true
            },

            _mallModel: {
                default: null,
                type: require("MallModel"),
                visible: true
            },

            label_HowMuchLackOf: cc.Label,
            label_RecoRechargeValue: cc.Label,
            label_CostRMB: cc.Label,

            gamePlayPanel: cc.Node,
            enterRoomBlock: cc.Node,
            lackOfTreasurePanel: cc.Node
        };
    },

    onLoad: function onLoad() {
        if (this.node.parent.getChildByName('EnterRoomPanel') != null) {
            this.node.parent.getChildByName('EnterRoomPanel').active = false;
        }
    },

    start: function start() {
        this.hasInited = false;

        this.howMuchLackOf = 0;
        this.recoRechargeValue = 0;
        this.costRMB = 0;
    },

    onChooseRoomToEnter: function onChooseRoomToEnter(event, customEventData) {
        var curTreasure = this._gameModel.curTreasure;
        var allowedTreasure = customEventData;

        if (curTreasure < allowedTreasure) {
            console.log(cc.js.formatStr("lack of treasure, curTreasure: %s, allowedTreasure: %s", curTreasure, allowedTreasure));
            this.onLackOfTreasure(Math.abs(curTreasure - allowedTreasure));
        } else {
            console.log(cc.js.formatStr("enough treasure, curTreasure: %s, allowedTreasure: %s", curTreasure, allowedTreasure));
            this.onEnterRoom();
        }
    },

    //  not allowed to enter room
    onLackOfTreasure: function onLackOfTreasure(reduction) {
        //  pop out the hint window: You should buy more coin
        this.lackOfTreasurePanel.active = true;

        //  how much treasure is it lack of
        var howMuchLackOf = reduction;
        this.label_HowMuchLackOf.string = this.label_HowMuchLackOf.string.replace(this.hasInited ? this.howMuchLackOf : 'value', howMuchLackOf);
        this.howMuchLackOf = howMuchLackOf;

        //  what is the nearest recommanded recharge value
        var voucherArray = [];
        var recoRechargeVoucherIndex = void 0;
        voucherArray = this._mallModel.voucherValuesArray;

        for (var i = 0; i < voucherArray.length; i++) {
            if (voucherArray[i].redeem_Treasure > this.howMuchLackOf / 10000) {
                console.log(cc.js.formatStr("redeem_Treasure: %s, howMuchLackOf: %s", voucherArray[i].redeem_Treasure, this.howMuchLackOf / 10000));
                recoRechargeVoucherIndex = i;
                break;
            }
        }
        this.label_RecoRechargeValue.string = this.label_RecoRechargeValue.string.replace(this.hasInited ? this.recoRechargeValue : 'value', voucherArray[recoRechargeVoucherIndex].redeem_Treasure);

        this.recoRechargeValue = voucherArray[recoRechargeVoucherIndex].redeem_Treasure;

        //  how much money does it cost
        this.label_CostRMB.string = this.label_CostRMB.string.replace(this.hasInited ? this.costRMB : 'value', voucherArray[recoRechargeVoucherIndex].price_rmb);

        this.costRMB = voucherArray[recoRechargeVoucherIndex].price_rmb;

        this.hasInited = true;
    },

    //  allow to enter room
    onEnterRoom: function onEnterRoom() {
        this.enterRoomBlock.active = false;
        this.lackOfTreasurePanel.active = false;

        this.gamePlayPanel.active = true;
    },

    onExitRechargeEntry: function onExitRechargeEntry() {
        this.lackOfTreasurePanel.active = false;
    },

    onFastRecharge: function onFastRecharge() {
        var newTreasure = this._gameModel.curTreasure + this.recoRechargeValue * 10000;
        this._gameControl.updateTreasureOnController(newTreasure);
        this._gameControl.updateValuesOnModel();
        this._gameControl.updateValuesOnView();

        //  update game info in this panel
        this.node.getComponent("GameInfoDisplay").setGameInfo();

        this.onExitRechargeEntry();
    },

    onEnterUserCenter: function onEnterUserCenter() {
        var userCenterBlock = cc.find('Canvas/UserCenterBlock');
        userCenterBlock.active = true;
        this.node.parent.active = false;
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=EnterRoom.js.map
        